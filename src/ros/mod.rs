mod lidar_message;

use rosbag::{ChunkRecord, MessageRecord, RosBag};

#[test]
fn read_bag() {
    let bag = RosBag::new("/home/jlettman/repos/clearobject/pipewrench/samples/new-ocr/sensors_2024-02-06-11-48-42-002.bag").unwrap();

    // Iterate over records in the chunk section
    for record in bag.chunk_records() {
        let rec = record.unwrap();
        match rec {
            ChunkRecord::Chunk(chunk) => {
                // iterate over messages in the chunk
                for msg in chunk.messages() {
                    match msg.unwrap() {
                        MessageRecord::Connection(conn) => {
                            // debug!("{:?}", conn);
                            // [2024-07-30T21:56:28Z DEBUG oyster::ros] Connection { id: 0, storage_topic: "/imu/data", topic: "/imu/data", tp: "sensor_msgs/Imu", md5sum: [106, 98, 198, 218, 174, 16, 63, 79, 245, 122, 19, 45, 111, 149, 206, 194], message_definition: "# This is a message to hold data from an IMU (Inertial Measurement Unit)\n#\n# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n#\n# If the covariance of the measurement is known, it should be filled in (if all you know is the \n# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n# data a covariance will have to be assumed or gotten from some other source\n#\n# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation \n# estimate), please set element 0 of the associated covariance matrix to -1\n# If you are interpreting this message, please check for a value of -1 in the first element of each \n# covariance matrix, and disregard the associated estimate.\n\nHeader header\n\ngeometry_msgs/Quaternion orientation\nfloat64[9] orientation_covariance # Row major about x, y, z axes\n\ngeometry_msgs/Vector3 angular_velocity\nfloat64[9] angular_velocity_covariance # Row major about x, y, z axes\n\ngeometry_msgs/Vector3 linear_acceleration\nfloat64[9] linear_acceleration_covariance # Row major x, y z \n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n", caller_id: "/receive_xsens", latching: false }
                            // [2024-07-30T21:56:28Z DEBUG oyster::ros] Connection { id: 1, storage_topic: "/imu/time_ref", topic: "/imu/time_ref", tp: "sensor_msgs/TimeReference", md5sum: [253, 237, 100, 160, 38, 81, 8, 186, 134, 195, 211, 143, 177, 28, 12, 22], message_definition: "# Measurement from an external time source not actively synchronized with the system clock.\n\nHeader header    # stamp is system time for which measurement was valid\n                 # frame_id is not used \n\ntime   time_ref  # corresponding time from this external source\nstring source    # (optional) name of time source\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n", caller_id: "/receive_xsens", latching: false }
                            // [2024-07-30T21:56:28Z DEBUG oyster::ros] Connection { id: 2, storage_topic: "/imu/time_diff", topic: "/imu/time_diff", tp: "std_msgs/Time", md5sum: [205, 113, 102, 199, 76, 85, 44, 49, 31, 188, 194, 254, 90, 123, 194, 137], message_definition: "time data\n", caller_id: "/receive_xsens", latching: false }
                            // [2024-07-30T21:56:28Z DEBUG oyster::ros] Connection { id: 3, storage_topic: "/ouster/lidar_packets", topic: "/ouster/lidar_packets", tp: "ouster_ros/PacketMsg", md5sum: [79, 123, 89, 73, 231, 111, 134, 208, 30, 150, 176, 227, 59, 169, 181, 227], message_definition: "uint8[] buf\n", caller_id: "/ouster/os_nodelet_mgr", latching: false }
                            // [2024-07-30T21:56:28Z DEBUG oyster::ros] Connection { id: 4, storage_topic: "/ouster/imu_packets", topic: "/ouster/imu_packets", tp: "ouster_ros/PacketMsg", md5sum: [79, 123, 89, 73, 231, 111, 134, 208, 30, 150, 176, 227, 59, 169, 181, 227], message_definition: "uint8[] buf\n", caller_id: "/ouster/os_nodelet_mgr", latching: false }
                        },
                        MessageRecord::MessageData(data) => {
                            // debug!("{:?}", data);

                            // [2024-07-30T21:55:22Z DEBUG oyster::ros] MessageData { conn_id: 0, time: 1707238134769902154, data: [241, 11, 0, 0, 246, 98, 194, 101, 74, 201, 3, 46, 4, 0, 0, 0, 47, 105, 109, 117, 0, 0, 0, 128, 45, 105, 194, 191, 0, 0, 0, 0, 44, 216, 231, 191, 0, 0, 0, 192, 63, 27, 228, 63, 1, 0, 0, 96, 179, 231, 197, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 218, 98, 53, 63, 1, 0, 0, 224, 196, 79, 52, 63, 1, 0, 0, 160, 193, 223, 100, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 170, 112, 231, 63, 1, 0, 0, 224, 219, 100, 35, 192, 1, 0, 0, 224, 235, 152, 248, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
                        },
                        _ => (),
                    }
                }
            },
            _ => {},
        }
    }
}
